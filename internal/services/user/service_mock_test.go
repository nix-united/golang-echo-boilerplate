// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock_test.go -package=user_test -typed=true
//

// Package user_test is a generated GoMock package.
package user_test

import (
	context "context"
	reflect "reflect"

	models "github.com/nix-united/golang-echo-boilerplate/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRepository is a mock of userRepository interface.
type MockuserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryMockRecorder
	isgomock struct{}
}

// MockuserRepositoryMockRecorder is the mock recorder for MockuserRepository.
type MockuserRepositoryMockRecorder struct {
	mock *MockuserRepository
}

// NewMockuserRepository creates a new mock instance.
func NewMockuserRepository(ctrl *gomock.Controller) *MockuserRepository {
	mock := &MockuserRepository{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepository) EXPECT() *MockuserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockuserRepository) Create(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockuserRepositoryMockRecorder) Create(ctx, user any) *MockuserRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockuserRepository)(nil).Create), ctx, user)
	return &MockuserRepositoryCreateCall{Call: call}
}

// MockuserRepositoryCreateCall wrap *gomock.Call
type MockuserRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryCreateCall) Return(arg0 error) *MockuserRepositoryCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryCreateCall) Do(f func(context.Context, *models.User) error) *MockuserRepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryCreateCall) DoAndReturn(f func(context.Context, *models.User) error) *MockuserRepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockuserRepository) GetByID(ctx context.Context, id uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockuserRepositoryMockRecorder) GetByID(ctx, id any) *MockuserRepositoryGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockuserRepository)(nil).GetByID), ctx, id)
	return &MockuserRepositoryGetByIDCall{Call: call}
}

// MockuserRepositoryGetByIDCall wrap *gomock.Call
type MockuserRepositoryGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryGetByIDCall) Return(arg0 models.User, arg1 error) *MockuserRepositoryGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryGetByIDCall) Do(f func(context.Context, uint) (models.User, error)) *MockuserRepositoryGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryGetByIDCall) DoAndReturn(f func(context.Context, uint) (models.User, error)) *MockuserRepositoryGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByEmail mocks base method.
func (m *MockuserRepository) GetUserByEmail(ctx context.Context, email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockuserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *MockuserRepositoryGetUserByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockuserRepository)(nil).GetUserByEmail), ctx, email)
	return &MockuserRepositoryGetUserByEmailCall{Call: call}
}

// MockuserRepositoryGetUserByEmailCall wrap *gomock.Call
type MockuserRepositoryGetUserByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRepositoryGetUserByEmailCall) Return(arg0 models.User, arg1 error) *MockuserRepositoryGetUserByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRepositoryGetUserByEmailCall) Do(f func(context.Context, string) (models.User, error)) *MockuserRepositoryGetUserByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRepositoryGetUserByEmailCall) DoAndReturn(f func(context.Context, string) (models.User, error)) *MockuserRepositoryGetUserByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
