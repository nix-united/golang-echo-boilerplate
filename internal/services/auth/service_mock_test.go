// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock_test.go -package=auth_test -typed=true
//

// Package auth_test is a generated GoMock package.
package auth_test

import (
	context "context"
	reflect "reflect"

	models "github.com/nix-united/golang-echo-boilerplate/internal/models"
	token "github.com/nix-united/golang-echo-boilerplate/internal/services/token"
	gomock "go.uber.org/mock/gomock"
)

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
	isgomock struct{}
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockuserService) GetByID(ctx context.Context, id uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockuserServiceMockRecorder) GetByID(ctx, id any) *MockuserServiceGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockuserService)(nil).GetByID), ctx, id)
	return &MockuserServiceGetByIDCall{Call: call}
}

// MockuserServiceGetByIDCall wrap *gomock.Call
type MockuserServiceGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserServiceGetByIDCall) Return(arg0 models.User, arg1 error) *MockuserServiceGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserServiceGetByIDCall) Do(f func(context.Context, uint) (models.User, error)) *MockuserServiceGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserServiceGetByIDCall) DoAndReturn(f func(context.Context, uint) (models.User, error)) *MockuserServiceGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByEmail mocks base method.
func (m *MockuserService) GetUserByEmail(ctx context.Context, email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockuserServiceMockRecorder) GetUserByEmail(ctx, email any) *MockuserServiceGetUserByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockuserService)(nil).GetUserByEmail), ctx, email)
	return &MockuserServiceGetUserByEmailCall{Call: call}
}

// MockuserServiceGetUserByEmailCall wrap *gomock.Call
type MockuserServiceGetUserByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserServiceGetUserByEmailCall) Return(arg0 models.User, arg1 error) *MockuserServiceGetUserByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserServiceGetUserByEmailCall) Do(f func(context.Context, string) (models.User, error)) *MockuserServiceGetUserByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserServiceGetUserByEmailCall) DoAndReturn(f func(context.Context, string) (models.User, error)) *MockuserServiceGetUserByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocktokenService is a mock of tokenService interface.
type MocktokenService struct {
	ctrl     *gomock.Controller
	recorder *MocktokenServiceMockRecorder
	isgomock struct{}
}

// MocktokenServiceMockRecorder is the mock recorder for MocktokenService.
type MocktokenServiceMockRecorder struct {
	mock *MocktokenService
}

// NewMocktokenService creates a new mock instance.
func NewMocktokenService(ctrl *gomock.Controller) *MocktokenService {
	mock := &MocktokenService{ctrl: ctrl}
	mock.recorder = &MocktokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktokenService) EXPECT() *MocktokenServiceMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MocktokenService) CreateAccessToken(ctx context.Context, user *models.User) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MocktokenServiceMockRecorder) CreateAccessToken(ctx, user any) *MocktokenServiceCreateAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MocktokenService)(nil).CreateAccessToken), ctx, user)
	return &MocktokenServiceCreateAccessTokenCall{Call: call}
}

// MocktokenServiceCreateAccessTokenCall wrap *gomock.Call
type MocktokenServiceCreateAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktokenServiceCreateAccessTokenCall) Return(arg0 string, arg1 int64, arg2 error) *MocktokenServiceCreateAccessTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktokenServiceCreateAccessTokenCall) Do(f func(context.Context, *models.User) (string, int64, error)) *MocktokenServiceCreateAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktokenServiceCreateAccessTokenCall) DoAndReturn(f func(context.Context, *models.User) (string, int64, error)) *MocktokenServiceCreateAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateRefreshToken mocks base method.
func (m *MocktokenService) CreateRefreshToken(ctx context.Context, user *models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MocktokenServiceMockRecorder) CreateRefreshToken(ctx, user any) *MocktokenServiceCreateRefreshTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MocktokenService)(nil).CreateRefreshToken), ctx, user)
	return &MocktokenServiceCreateRefreshTokenCall{Call: call}
}

// MocktokenServiceCreateRefreshTokenCall wrap *gomock.Call
type MocktokenServiceCreateRefreshTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktokenServiceCreateRefreshTokenCall) Return(arg0 string, arg1 error) *MocktokenServiceCreateRefreshTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktokenServiceCreateRefreshTokenCall) Do(f func(context.Context, *models.User) (string, error)) *MocktokenServiceCreateRefreshTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktokenServiceCreateRefreshTokenCall) DoAndReturn(f func(context.Context, *models.User) (string, error)) *MocktokenServiceCreateRefreshTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ParseRefreshToken mocks base method.
func (m *MocktokenService) ParseRefreshToken(ctx context.Context, arg1 string) (*token.JwtCustomRefreshClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRefreshToken", ctx, arg1)
	ret0, _ := ret[0].(*token.JwtCustomRefreshClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRefreshToken indicates an expected call of ParseRefreshToken.
func (mr *MocktokenServiceMockRecorder) ParseRefreshToken(ctx, arg1 any) *MocktokenServiceParseRefreshTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRefreshToken", reflect.TypeOf((*MocktokenService)(nil).ParseRefreshToken), ctx, arg1)
	return &MocktokenServiceParseRefreshTokenCall{Call: call}
}

// MocktokenServiceParseRefreshTokenCall wrap *gomock.Call
type MocktokenServiceParseRefreshTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktokenServiceParseRefreshTokenCall) Return(arg0 *token.JwtCustomRefreshClaims, arg1 error) *MocktokenServiceParseRefreshTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktokenServiceParseRefreshTokenCall) Do(f func(context.Context, string) (*token.JwtCustomRefreshClaims, error)) *MocktokenServiceParseRefreshTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktokenServiceParseRefreshTokenCall) DoAndReturn(f func(context.Context, string) (*token.JwtCustomRefreshClaims, error)) *MocktokenServiceParseRefreshTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
