// Code generated by MockGen. DO NOT EDIT.
// Source: post_handler.go
//
// Generated by this command:
//
//	mockgen -source=post_handler.go -destination=post_handler_mock_test.go -package=handlers_test -typed=true
//

// Package handlers_test is a generated GoMock package.
package handlers_test

import (
	context "context"
	reflect "reflect"

	models "github.com/nix-united/golang-echo-boilerplate/internal/models"
	requests "github.com/nix-united/golang-echo-boilerplate/internal/requests"
	gomock "go.uber.org/mock/gomock"
)

// MockpostService is a mock of postService interface.
type MockpostService struct {
	ctrl     *gomock.Controller
	recorder *MockpostServiceMockRecorder
	isgomock struct{}
}

// MockpostServiceMockRecorder is the mock recorder for MockpostService.
type MockpostServiceMockRecorder struct {
	mock *MockpostService
}

// NewMockpostService creates a new mock instance.
func NewMockpostService(ctrl *gomock.Controller) *MockpostService {
	mock := &MockpostService{ctrl: ctrl}
	mock.recorder = &MockpostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostService) EXPECT() *MockpostServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockpostService) Create(ctx context.Context, post *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockpostServiceMockRecorder) Create(ctx, post any) *MockpostServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpostService)(nil).Create), ctx, post)
	return &MockpostServiceCreateCall{Call: call}
}

// MockpostServiceCreateCall wrap *gomock.Call
type MockpostServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceCreateCall) Return(arg0 error) *MockpostServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceCreateCall) Do(f func(context.Context, *models.Post) error) *MockpostServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceCreateCall) DoAndReturn(f func(context.Context, *models.Post) error) *MockpostServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockpostService) Delete(ctx context.Context, post *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockpostServiceMockRecorder) Delete(ctx, post any) *MockpostServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpostService)(nil).Delete), ctx, post)
	return &MockpostServiceDeleteCall{Call: call}
}

// MockpostServiceDeleteCall wrap *gomock.Call
type MockpostServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceDeleteCall) Return(arg0 error) *MockpostServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceDeleteCall) Do(f func(context.Context, *models.Post) error) *MockpostServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceDeleteCall) DoAndReturn(f func(context.Context, *models.Post) error) *MockpostServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPost mocks base method.
func (m *MockpostService) GetPost(ctx context.Context, id uint) (models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockpostServiceMockRecorder) GetPost(ctx, id any) *MockpostServiceGetPostCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockpostService)(nil).GetPost), ctx, id)
	return &MockpostServiceGetPostCall{Call: call}
}

// MockpostServiceGetPostCall wrap *gomock.Call
type MockpostServiceGetPostCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceGetPostCall) Return(arg0 models.Post, arg1 error) *MockpostServiceGetPostCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceGetPostCall) Do(f func(context.Context, uint) (models.Post, error)) *MockpostServiceGetPostCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceGetPostCall) DoAndReturn(f func(context.Context, uint) (models.Post, error)) *MockpostServiceGetPostCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPosts mocks base method.
func (m *MockpostService) GetPosts(ctx context.Context) ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockpostServiceMockRecorder) GetPosts(ctx any) *MockpostServiceGetPostsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockpostService)(nil).GetPosts), ctx)
	return &MockpostServiceGetPostsCall{Call: call}
}

// MockpostServiceGetPostsCall wrap *gomock.Call
type MockpostServiceGetPostsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceGetPostsCall) Return(arg0 []models.Post, arg1 error) *MockpostServiceGetPostsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceGetPostsCall) Do(f func(context.Context) ([]models.Post, error)) *MockpostServiceGetPostsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceGetPostsCall) DoAndReturn(f func(context.Context) ([]models.Post, error)) *MockpostServiceGetPostsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockpostService) Update(ctx context.Context, post *models.Post, updatePostRequest requests.UpdatePostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, post, updatePostRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockpostServiceMockRecorder) Update(ctx, post, updatePostRequest any) *MockpostServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockpostService)(nil).Update), ctx, post, updatePostRequest)
	return &MockpostServiceUpdateCall{Call: call}
}

// MockpostServiceUpdateCall wrap *gomock.Call
type MockpostServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostServiceUpdateCall) Return(arg0 error) *MockpostServiceUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostServiceUpdateCall) Do(f func(context.Context, *models.Post, requests.UpdatePostRequest) error) *MockpostServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostServiceUpdateCall) DoAndReturn(f func(context.Context, *models.Post, requests.UpdatePostRequest) error) *MockpostServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
