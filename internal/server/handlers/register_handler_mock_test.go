// Code generated by MockGen. DO NOT EDIT.
// Source: register_handler.go
//
// Generated by this command:
//
//	mockgen -source=register_handler.go -destination=register_handler_mock_test.go -package=handlers_test -typed=true
//

// Package handlers_test is a generated GoMock package.
package handlers_test

import (
	context "context"
	reflect "reflect"

	models "github.com/nix-united/golang-echo-boilerplate/internal/models"
	requests "github.com/nix-united/golang-echo-boilerplate/internal/requests"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRegisterer is a mock of userRegisterer interface.
type MockuserRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockuserRegistererMockRecorder
	isgomock struct{}
}

// MockuserRegistererMockRecorder is the mock recorder for MockuserRegisterer.
type MockuserRegistererMockRecorder struct {
	mock *MockuserRegisterer
}

// NewMockuserRegisterer creates a new mock instance.
func NewMockuserRegisterer(ctrl *gomock.Controller) *MockuserRegisterer {
	mock := &MockuserRegisterer{ctrl: ctrl}
	mock.recorder = &MockuserRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRegisterer) EXPECT() *MockuserRegistererMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockuserRegisterer) GetUserByEmail(ctx context.Context, email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockuserRegistererMockRecorder) GetUserByEmail(ctx, email any) *MockuserRegistererGetUserByEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockuserRegisterer)(nil).GetUserByEmail), ctx, email)
	return &MockuserRegistererGetUserByEmailCall{Call: call}
}

// MockuserRegistererGetUserByEmailCall wrap *gomock.Call
type MockuserRegistererGetUserByEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRegistererGetUserByEmailCall) Return(arg0 models.User, arg1 error) *MockuserRegistererGetUserByEmailCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRegistererGetUserByEmailCall) Do(f func(context.Context, string) (models.User, error)) *MockuserRegistererGetUserByEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRegistererGetUserByEmailCall) DoAndReturn(f func(context.Context, string) (models.User, error)) *MockuserRegistererGetUserByEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Register mocks base method.
func (m *MockuserRegisterer) Register(ctx context.Context, request *requests.RegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockuserRegistererMockRecorder) Register(ctx, request any) *MockuserRegistererRegisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockuserRegisterer)(nil).Register), ctx, request)
	return &MockuserRegistererRegisterCall{Call: call}
}

// MockuserRegistererRegisterCall wrap *gomock.Call
type MockuserRegistererRegisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockuserRegistererRegisterCall) Return(arg0 error) *MockuserRegistererRegisterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockuserRegistererRegisterCall) Do(f func(context.Context, *requests.RegisterRequest) error) *MockuserRegistererRegisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockuserRegistererRegisterCall) DoAndReturn(f func(context.Context, *requests.RegisterRequest) error) *MockuserRegistererRegisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
