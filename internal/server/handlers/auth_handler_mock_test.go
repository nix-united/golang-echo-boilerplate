// Code generated by MockGen. DO NOT EDIT.
// Source: auth_handler.go
//
// Generated by this command:
//
//	mockgen -source=auth_handler.go -destination=auth_handler_mock_test.go -package=handlers_test -typed=true
//

// Package handlers_test is a generated GoMock package.
package handlers_test

import (
	context "context"
	reflect "reflect"

	requests "github.com/nix-united/golang-echo-boilerplate/internal/requests"
	responses "github.com/nix-united/golang-echo-boilerplate/internal/responses"
	gomock "go.uber.org/mock/gomock"
)

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
	isgomock struct{}
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockauthService) GenerateToken(ctx context.Context, request *requests.LoginRequest) (*responses.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, request)
	ret0, _ := ret[0].(*responses.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockauthServiceMockRecorder) GenerateToken(ctx, request any) *MockauthServiceGenerateTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockauthService)(nil).GenerateToken), ctx, request)
	return &MockauthServiceGenerateTokenCall{Call: call}
}

// MockauthServiceGenerateTokenCall wrap *gomock.Call
type MockauthServiceGenerateTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockauthServiceGenerateTokenCall) Return(arg0 *responses.LoginResponse, arg1 error) *MockauthServiceGenerateTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockauthServiceGenerateTokenCall) Do(f func(context.Context, *requests.LoginRequest) (*responses.LoginResponse, error)) *MockauthServiceGenerateTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockauthServiceGenerateTokenCall) DoAndReturn(f func(context.Context, *requests.LoginRequest) (*responses.LoginResponse, error)) *MockauthServiceGenerateTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RefreshToken mocks base method.
func (m *MockauthService) RefreshToken(ctx context.Context, request *requests.RefreshRequest) (*responses.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, request)
	ret0, _ := ret[0].(*responses.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockauthServiceMockRecorder) RefreshToken(ctx, request any) *MockauthServiceRefreshTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockauthService)(nil).RefreshToken), ctx, request)
	return &MockauthServiceRefreshTokenCall{Call: call}
}

// MockauthServiceRefreshTokenCall wrap *gomock.Call
type MockauthServiceRefreshTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockauthServiceRefreshTokenCall) Return(arg0 *responses.LoginResponse, arg1 error) *MockauthServiceRefreshTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockauthServiceRefreshTokenCall) Do(f func(context.Context, *requests.RefreshRequest) (*responses.LoginResponse, error)) *MockauthServiceRefreshTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockauthServiceRefreshTokenCall) DoAndReturn(f func(context.Context, *requests.RefreshRequest) (*responses.LoginResponse, error)) *MockauthServiceRefreshTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
